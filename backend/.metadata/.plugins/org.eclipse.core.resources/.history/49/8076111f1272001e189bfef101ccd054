package com.kick;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLDecoder;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageOutputStream;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.hibernate.internal.build.AllowSysOut;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.support.ui.Select;
import org.postgresql.gss.GSSOutputStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;

import java.awt.AlphaComposite;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;

@SpringBootTest
class SeleniumApplicationTests2 {
	private static final int IMG_WIDTH = 300;
    private static final int IMG_HEIGHT = 150;
    
    
	@Test
	void contextLoads() throws IOException, InterruptedException {

        Path source = Paths.get("C:\\test\\google.png");
        Path target = Paths.get("C:\\test\\resize.png");

        try (InputStream is = new FileInputStream(source.toFile())) {
            resize(is, target, IMG_WIDTH, IMG_HEIGHT);
        }
			
	}
	private static void resize(InputStream input, Path target,
        int width, int height) throws IOException {

		// read an image to BufferedImage for processing
		BufferedImage originalImage = ImageIO.read(input);
		
		// create a new BufferedImage for drawing
		BufferedImage newResizedImage
		= new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
		Graphics2D g = newResizedImage.createGraphics();
		
		//g.setBackground(Color.WHITE);
		//g.setPaint(Color.WHITE);
		
		// background transparent
		g.setComposite(AlphaComposite.Src);
		g.fillRect(0, 0, width, height);
		
		/* try addRenderingHints()
		// VALUE_RENDER_DEFAULT = good tradeoff of performance vs quality
		// VALUE_RENDER_SPEED   = prefer speed
		// VALUE_RENDER_QUALITY = prefer quality
		g.setRenderingHint(RenderingHints.KEY_RENDERING,
		            RenderingHints.VALUE_RENDER_QUALITY);
		
		// controls how image pixels are filtered or resampled
		g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
		            RenderingHints.VALUE_INTERPOLATION_BILINEAR);
		
		// antialiasing, on
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
		            RenderingHints.VALUE_ANTIALIAS_ON);*/
		
		Map<RenderingHints.Key,Object> hints = new HashMap<>();
		hints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
		hints.put(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
		hints.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g.addRenderingHints(hints);
		
		// puts the original image into the newResizedImage
		g.drawImage(originalImage, 0, 0, IMG_WIDTH, IMG_HEIGHT, null);
		g.dispose();
		
		// get file extension
		String s = target.getFileName().toString();
		String fileExtension = s.substring(s.lastIndexOf(".") + 1);
		
		// we want image in png format
		ImageIO.write(newResizedImage, fileExtension, target.toFile());

	 }
	
}

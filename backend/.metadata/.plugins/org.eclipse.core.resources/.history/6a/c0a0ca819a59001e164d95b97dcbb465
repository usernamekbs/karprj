package com.kick.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.kick.common.file.FileUtils;
import com.kick.entity.Category;
import com.kick.entity.Comment;
import com.kick.entity.File;
import com.kick.entity.Post;
import com.kick.repository.category.CategoryRepository;
import com.kick.repository.comment.CommentRepository;
import com.kick.repository.file.FileRepository;
import com.kick.repository.post.PostRepository;
import com.kick.web.dto.comment.CommentDto;
import com.kick.web.dto.post.PostDto;
import com.kick.web.dto.post.PostViewDto;
import com.kick.web.dto.post.RequestPostDto;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
@Transactional
public class PostService {
	
	private final PostRepository postRepository;
	private final CommentRepository commentRepository;
	private final CategoryRepository categoryRepository;
	private final FileRepository fileRepository;
	private final FileUtils fileUtils;
	
	@Transactional(readOnly = true)
	public Page<PostDto> postList(Pageable pageable,String searchText,String searchType) {
		//pageImple은 list pageable totalcount를 넣어줘야한다.
		return postRepository.findAllList(pageable,searchText,searchType);
	}
	
	public PostViewDto postView(Long id) {
		Post post = postRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("해당 사용자가 없습니다. id=" + id));
		post.updateViews();
		List<CommentDto> list = addChildComment(commentRepository.findAllList(id));
		return new PostViewDto(post,list);
	}
	
	public PostDto postSave(RequestPostDto requestPostDto,List<MultipartFile> multiPartFiles) {
		Category category= categoryRepository.findById(requestPostDto.getCategoryId()).orElseThrow(() -> new IllegalArgumentException("해당 게시글 번호가 없습니다. =" +requestPostDto.getCategoryId()));
		Post post = requestPostDto.toEntity(category);
		postRepository.save(post);
		
		if(multiPartFiles == null || multiPartFiles.isEmpty()){
            System.out.println("파일이 없습니다.");
        }else {
        	fileUtils.multiFileUpload(multiPartFiles);
        	for(MultipartFile mf : multiPartFiles) {
				
				File file = File.builder()
								.filePath(null)
								.origName(mf.getOriginalFilename())
								.contentType(mf.getContentType())
								.fileSize(mf.getSize())
								.post(post)
								.build();
				fileRepository.save(file); 
			}		
		}
		return new PostDto(post);
	}
	
	public PostDto postUpdate(RequestPostDto requestPostDto,Long id) {
		Post post = postRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("해당 사용자가 없습니다. id=" + id));
		post.update(requestPostDto.getTitle(), requestPostDto.getContent());
		return new PostDto(post);
	}

	public void postDelete(Long id) {
		postRepository.deleteById(id);
	}

	private List<CommentDto> addChildComment(List<Comment> commentList) {
		List<CommentDto> result = new ArrayList<>();
    	Map<Long, CommentDto> map = new HashMap<>(); 
    	commentList.stream().forEach(c -> {
    		 CommentDto dto = new CommentDto(c);
             map.put(dto.getId(), dto);
             if(c.getParent() != null) 
            	 map.get(c.getParent().getId()).getChildren().add(dto);
        	 else {
    			 result.add(dto);
    		 }
    	});
		return result;
	}

}